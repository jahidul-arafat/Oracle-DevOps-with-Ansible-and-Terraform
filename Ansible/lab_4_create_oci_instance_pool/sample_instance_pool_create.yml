---
- name: Create a compute instance pool and launch instances
  hosts: localhost
  collections:
    - oracle.oci

  vars:
    ssh_key_filename: id_rsa_myproject
    json_report: ./report.json

  vars_prompt: # 8x
    # Input Section -01: Select the Compartment and AD
    - name: instance_compartment
      prompt: "Enter Your COMPARTMENT OCID:"
      default: "ocid1.compartment.oc1..aaaaaaaa5hplc4q67l76kzeygvcbbu73da3kxhndhogtfvxgwtpd2xzayecq" # sandbox compartment
      private: no

    - name: instance_ad
      prompt: "Enter AD Name:"
      default: "oAOj:AP-MUMBAI-1-AD-1"
      private: no

    # Input Section-02: Select instance image and shape
    - name: instance_image
      prompt: "Enter Instance Image ID: [Oracle-Linux-8.5-2022.01.24-0]"
      default: "ocid1.image.oc1.ap-mumbai-1.aaaaaaaa64semv36x5gssmswplzkuirimzoapsvd4rh3s7sbdfev6fpkd6yq"
      private: no

    - name: instance_shape
      prompt: "Enter Instance Shape:"
      default: "VM.Standard2.1"
      private: no

    - name: instance_display_name
      prompt: "Set your instance Display Name:"
      default: "ansible-instance-pool-instance"
      private: no

    # Input Section-04: VNIC Details required
    - name: instance_subnet_id
      prompt: "Instance Subnet ID:[Public/Private]:"
      default: "ocid1.subnet.oc1.ap-mumbai-1.aaaaaaaapltjnevul4idswrxbozu32ovffo7dgmlx6kyyjr2puqpzdiyscsq"
      private: no

    # Input Section-03: Set the instance configuration and instance pool name
    - name: instance_pool_configuration_name
      prompt: "Set Instance Pool Configuration Name"
      default: "ansible-sample-create-instance-pool-configuration"
      private: no

    - name: instance_pool_name
      prompt: "Set Instance Pool Name"
      default: "ansible-sample-create-instance-pool"
      private: no

  tasks:
    # Task-01: Generate the SSH keys (if you dont supply the ssh-key) for instance connectivity testing
    - block: # Task-1/1.1/1.2
      # 1.1 Creating the ssh-key temp directory
      - name: Create Ansible SSH Directory
        file: path=./ansible_ssh state=directory

      # 1.2 Generating the ssh-key in tmp directory
      - name: generate SSH key "{{ssh_key_filename}}"
        openssh_keypair:
          path: "./ansible_ssh/{{ssh_key_filename}}"
          type: rsa
          size: 4096
          state: present
          force: no
      - set_fact:
          ssh_public_key: "./ansible_ssh/{{ssh_key_filename}}.pub"
          ssh_private_key: "./ansible_ssh/{{ssh_key_filename}}"
      when: "'SAMPLE_PUBLIC_SSH_KEY' not in ansible_env"

    # Set the system ssh key based on whether user passed the ssh-key, or the system generated itself as above
    - set_fact:
        SSH_AUTHORIZED_KEYS: "{{ lookup('env', 'SAMPLE_PUBLIC_SSH_KEY') if 'SAMPLE_PUBLIC_SSH_KEY' in ansible_env else lookup('file',  ssh_public_key ) }}"
    #=======================================================================================================================

    # Task-02: Create a new basic compute instance configuration that has launch_details and VNIC configuration
    - name: Create a new basic compute instance configuration that has launch_details and VNIC configuration
      oci_compute_management_instance_configuration:
        compartment_id: "{{instance_compartment}}"
        name: "{{instance_pool_configuration_name}}"
        instance_details:                               # instance_type+ launch_details
          instance_type: "compute"
          launch_details:                               # comp_ocid+create_vnic+display_name+shape+image+ssh_key
            compartment_id: "{{instance_compartment}}"
            create_vnic_details:
              assign_public_ip: True
              display_name: "{{instance_display_name}}"
            display_name: "{{instance_display_name}}"
            shape: "{{instance_shape}}"
            source_details:
              source_type: "image"
              image_id: "{{instance_image}}"
            metadata:
              ssh_authorized_keys: "{{SSH_AUTHORIZED_KEYS}}"
      register: result
    - set_fact:
        instance_configuration_id: "{{result.instance_configuration.id}}"       # Derived Value. Will be used NEXT-->>(instance_pool)

    - name: Print the Instance Configuration Details
      debug:
        msg: "Created a new Instance Configuration: {{result.instance_configuration}}"

    #=======================================================================================================================

    # Task-03: Create a new INSTANCE POOL from INSTANCE CONFIGURATION
    - name: Create a new instance pool from instance configuration
      oci_compute_management_instance_pool:
        compartment_id: "{{instance_compartment}}"
        name: "{{instance_pool_name}}"
        instance_configuration_id: "{{instance_configuration_id}}"
        size: 1 # launch 1 instances when pool is created
        placement_configurations:   # use '-' infront of ad as placement_configurations is a dict, not a list  # Error: 'placement_configurations' is of type <class 'dict'> and we were unable to convert to list: <class 'dict'> cannot be converted to a list"
          - availability_domain: "{{instance_ad}}"
            primary_subnet_id: "{{instance_subnet_id}}"
      register: result
    - set_fact:
        instance_pool_id: "{{result.instance_pool.id}}"                         # Derived Value. Will be used NEXT-->>to get instances in the instance_pool)

    - name: Print Instance Pool Details
      debug:
        msg: "Created a new Instance pool {{result.instance_pool}}"

    #==================================================================================================================
    # Task-04: Get Instance details in the instance pool, print the details and get the first instance from the pool
    - name: Get instance details of instances in the instance pool
      oci_compute_management_instance_pool_instance_facts:
        compartment_id: "{{instance_compartment}}"
        id: "{{instance_pool_id}}"                                             # instance_pool ID
      register: result
    - set_fact:
        instance_pool_instances: "{{result.instance_pool_instances}}"          # Derived Value. Will be used NEXT-->>(to fetch the first instance from the pool)

    - name: Print details of Instances in the new instance pool
      debug:
        msg: "Instances in Instance Pool {{instance_pool_id}} are {{instance_pool_instances}}"

    - name: Get the first instance from the pool
      set_fact:
        instance_id: "{{instance_pool_instances[0].id}}" # 0--> first instance  # Derived Value. Will be used NEXT-->>(to fetch the public ip for ssh connectivity testing)

    #==================================================================================================================
    # Task-05: Fetch the Public IP for that Instance from VNIC attachments
    - name: Get the VNIC attachment details of that instance to fetch the public_ip   # purpose: For later ssh connection testing
      oci_compute_vnic_attachment_facts:
        compartment_id: "{{instance_compartment}}"
        instance_id: "{{instance_id}}"
      register: result
    - set_fact:
        vnic_attachments: "{{result.vnic_attachments}}"                                    # could be a number of vnic attachments

    - name: Get the details of VNIC of that VNIC attachment
      oci_network_vnic_facts:
        id: "{{vnic_attachments[0].vnic_id}}"   # vnic_id                           # fetch the primary/first VNIC attachment id from a list
      register: result
    - set_fact:
        instance_public_ip: "{{result.vnic.public_ip}}"                             # Derived Value. Will be used next-->>(for ssh connectivity testing with public_ip)

    - name: Print the Public IP of the newly launched instance
      debug:
        msg: "Public IP of the launched instance: {{instance_public_ip}}"
    #==================================================================================================================

    # Task-06: SSH Connection Testing
    # 6.1 Let the ssh open first; wait a bit
    # and decide whether to use the connection with your supplied ssh-key or system generated ssh-key

    # i. Wait a bit, let the connection open first
    - name: Wait (upto 10 minutes) for port 22 to become open
      wait_for:
        port: 22
        host: '{{ instance_public_ip }}'
        state: started
        delay: 10
        timeout: 600
      vars:
        ansible_connection: local

    # ii. Using system-generated ssh-key
    - set_fact:
        # Use "opc" user as this is an OL image
        # Disable SSH's strict host key checking just for this one command invocation
        ssh_command_with_generated_key: ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -i {{ssh_private_key}} opc@{{ instance_public_ip }} uname -a
      when: "'SAMPLE_PUBLIC_SSH_KEY' not in ansible_env"

    # iii. Using your own ssh-key
    - set_fact:
        # Use "opc" user as this is an OL image
        # Disable SSH's strict host key checking just for this one command invocation
        ssh_command_with_custom_key: ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" opc@{{ instance_public_ip }} uname -a
      when: "'SAMPLE_PUBLIC_SSH_KEY' in ansible_env"

    # 6.2 Attempt the ssh-connection with the newly launched instance and return the connection status response to console as debug
    - name: Attempt a ssh connection to the newly launched instance
      command: "{{ ssh_command_with_custom_key if 'SAMPLE_PUBLIC_SSH_KEY' in ansible_env else ssh_command_with_generated_key }}"
      retries: 3
      delay: 5
      register: result
      until: result.rc == 0

    - name: Print SSH response from launched instance
      debug:
        msg: "SSH response from instance -> {{ result.stdout_lines }}"
    - set_fact:
        ssh_response_status: "{{ result.stdout_lines }}"

    #==================================================================================================================
    # Task-07: Generating Report
    - import_tasks: report.yml

